{"ast":null,"code":"var _jsxFileName = \"C:\\\\jobHunt\\\\jobhunt\\\\src\\\\components\\\\login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { signInWithRedirect, GoogleAuthProvider, getRedirectResult } from \"firebase/auth\";\nimport { auth } from \"./firebase\"; // Assuming your Firebase setup\nimport { useNavigate } from \"react-router-dom\"; // Importing useNavigate from react-router-dom\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new GoogleAuthProvider();\nconst Login = () => {\n  _s();\n  const navigate = useNavigate(); // Initialize useNavigate hook to navigate programmatically\n\n  const handleLogin = async () => {\n    try {\n      // Use redirect method to avoid popup issues\n      await signInWithRedirect(auth, provider);\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n    }\n  };\n  useEffect(() => {\n    // Handle the result of the redirect sign-in\n    const checkRedirectResult = async () => {\n      try {\n        const result = await getRedirectResult(auth);\n        if (result) {\n          // If sign-in is successful, redirect to the dashboard\n          navigate(\"/dashboard\");\n        }\n      } catch (error) {\n        console.error(\"Redirect sign-in failed:\", error);\n      }\n    };\n    checkRedirectResult();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","signInWithRedirect","GoogleAuthProvider","getRedirectResult","auth","useNavigate","jsxDEV","_jsxDEV","provider","Login","_s","navigate","handleLogin","error","console","checkRedirectResult","result","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/jobHunt/jobhunt/src/components/login.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { signInWithRedirect, GoogleAuthProvider, getRedirectResult } from \"firebase/auth\";\r\nimport { auth } from \"./firebase\"; // Assuming your Firebase setup\r\nimport { useNavigate } from \"react-router-dom\";  // Importing useNavigate from react-router-dom\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nconst Login = () => {\r\n  const navigate = useNavigate(); // Initialize useNavigate hook to navigate programmatically\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      // Use redirect method to avoid popup issues\r\n      await signInWithRedirect(auth, provider);\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Handle the result of the redirect sign-in\r\n    const checkRedirectResult = async () => {\r\n      try {\r\n        const result = await getRedirectResult(auth);\r\n        if (result) {\r\n          // If sign-in is successful, redirect to the dashboard\r\n          navigate(\"/dashboard\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Redirect sign-in failed:\", error);\r\n      }\r\n    };\r\n\r\n    checkRedirectResult();\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\r\n      <h2>Login</h2>\r\n      <button onClick={handleLogin}>Sign in with Google</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,kBAAkB,EAAEC,kBAAkB,EAAEC,iBAAiB,QAAQ,eAAe;AACzF,SAASC,IAAI,QAAQ,YAAY,CAAC,CAAC;AACnC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,QAAQ,GAAG,IAAIN,kBAAkB,CAAC,CAAC;AAEzC,MAAMO,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,MAAMX,kBAAkB,CAACG,IAAI,EAAEI,QAAQ,CAAC;IAC1C,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC;EACF,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMb,iBAAiB,CAACC,IAAI,CAAC;QAC5C,IAAIY,MAAM,EAAE;UACV;UACAL,QAAQ,CAAC,YAAY,CAAC;QACxB;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDE,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,oBACEJ,OAAA;IAAKU,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACrDb,OAAA;MAAAa,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdjB,OAAA;MAAQkB,OAAO,EAAEb,WAAY;MAAAQ,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAACd,EAAA,CAnCID,KAAK;EAAA,QACQJ,WAAW;AAAA;AAAAqB,EAAA,GADxBjB,KAAK;AAqCX,eAAeA,KAAK;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}