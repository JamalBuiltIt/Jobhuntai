{"ast":null,"code":"var _jsxFileName = \"C:\\\\jobHunt\\\\jobhunt\\\\src\\\\components\\\\coverLetterGenerator.js\",\n  _s = $RefreshSig$();\nimport express from \"express\";\nimport cors from \"cors\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst PORT = process.env.PORT || 5000;\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY; // Ensure this is set in your .env file\n\n// POST /api/generateCoverLetter endpoint\napp.post(\"/api/generateCoverLetter\", async (req, res) => {\n  try {\n    // Expected fields\n    const {\n      name,\n      jobTitle,\n      company,\n      experience,\n      skills,\n      additionalInfo\n    } = req.body;\n    console.log(\"Received request data:\", req.body);\n\n    // Validate required fields\n    if (!name || !jobTitle || !company || !experience || !skills) {\n      return res.status(400).json({\n        error: \"Fields 'name', 'jobTitle', 'company', 'experience', and 'skills' are required\"\n      });\n    }\n\n    // Construct a prompt for generating the cover letter.\n    // Optionally include additional info if provided.\n    const prompt = `Generate a professional cover letter for ${name} applying for a ${jobTitle} position at ${company}.\nWork Experience: ${experience}.\nSkills: ${skills}.\n${additionalInfo ? \"Additional Information: \" + additionalInfo : \"\"}\nEnsure the cover letter is well-structured, engaging, and tailored to the job application.`;\n\n    // Use the official Gemini API endpoint per documentation:\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;\n\n    // Make the POST request to Gemini API using axios.\n    const response = await axios.post(apiUrl, {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(\"API response:\", response.data);\n\n    // Check if the API returned valid candidates and extract the generated cover letter.\n    if (response.data && response.data.candidates && response.data.candidates.length > 0) {\n      var _response$data$candid, _response$data$candid2;\n      const coverLetter = (_response$data$candid = response.data.candidates[0].content) === null || _response$data$candid === void 0 ? void 0 : (_response$data$candid2 = _response$data$candid.parts[0]) === null || _response$data$candid2 === void 0 ? void 0 : _response$data$candid2.text;\n      res.json({\n        coverLetter: coverLetter || \"Cover letter generation failed\"\n      });\n    } else {\n      res.status(400).json({\n        error: \"Failed to generate cover letter\"\n      });\n    }\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data, _error$response2$data2;\n    console.error(\"Error generating cover letter:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    res.status(500).json({\n      error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || \"Internal Server Error\"\n    });\n  }\n});\n\n// Start the server on the specified PORT\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\nimport React, { useState } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport \"../css/coverLetterGenerator.css\"; // Ensure you have corresponding CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoverLetterGenerator = () => {\n  _s();\n  // Form fields: name, jobTitle, company, experience, skills, and additionalInfo (optional)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    jobTitle: \"\",\n    company: \"\",\n    experience: \"\",\n    skills: \"\",\n    additionalInfo: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Update state when input changes\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Generate cover letter by calling the backend endpoint\n  const generateCoverLetter = async () => {\n    setLoading(true);\n    setCoverLetter(\"\");\n    setError(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5000/api/generateCoverLetter\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Something went wrong with the request\");\n      }\n      const data = await response.json();\n      setCoverLetter(data.coverLetter);\n    } catch (err) {\n      console.error(\"Request failed:\", err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Download the generated cover letter as a text file\n  const downloadCoverLetter = () => {\n    if (coverLetter) {\n      const blob = new Blob([coverLetter], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, \"coverLetter.txt\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cover-letter-generator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Cover Letter Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"name\",\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter your name\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"jobTitle\",\n          children: \"Job Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"jobTitle\",\n          type: \"text\",\n          name: \"jobTitle\",\n          placeholder: \"Enter the job title\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"company\",\n          children: \"Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"company\",\n          type: \"text\",\n          name: \"company\",\n          placeholder: \"Enter the company name\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"experience\",\n          children: \"Work Experience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"experience\",\n          name: \"experience\",\n          placeholder: \"Describe your work experience\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"skills\",\n          children: \"Skills\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"skills\",\n          name: \"skills\",\n          placeholder: \"List your skills (comma-separated)\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"additionalInfo\",\n          children: \"Additional Information (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"additionalInfo\",\n          name: \"additionalInfo\",\n          placeholder: \"Any additional details you'd like to include\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `generate-btn ${loading ? \"loading\" : \"\"}`,\n        onClick: generateCoverLetter,\n        disabled: loading,\n        children: loading ? \"Generating...\" : \"Generate Cover Letter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }, this), coverLetter && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cover-letter-output\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Cover Letter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: coverLetter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-btn\",\n        onClick: downloadCoverLetter,\n        children: \"Download Cover Letter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(CoverLetterGenerator, \"tQ95cg/7iikX1Kks2MjQft9O9VA=\");\n_c = CoverLetterGenerator;\nexport default CoverLetterGenerator;\nvar _c;\n$RefreshReg$(_c, \"CoverLetterGenerator\");","map":{"version":3,"names":["express","cors","axios","dotenv","config","app","use","json","PORT","process","env","GEMINI_API_KEY","post","req","res","name","jobTitle","company","experience","skills","additionalInfo","body","console","log","status","error","prompt","apiUrl","response","contents","parts","text","headers","data","candidates","length","_response$data$candid","_response$data$candid2","coverLetter","content","_error$response","_error$response2","_error$response2$data","_error$response2$data2","message","listen","React","useState","saveAs","jsxDEV","_jsxDEV","CoverLetterGenerator","_s","formData","setFormData","loading","setLoading","setCoverLetter","setError","handleChange","e","target","value","generateCoverLetter","fetch","method","JSON","stringify","ok","errorData","Error","err","downloadCoverLetter","blob","Blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","placeholder","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/jobHunt/jobhunt/src/components/coverLetterGenerator.js"],"sourcesContent":["import express from \"express\";\r\nimport cors from \"cors\";\r\nimport axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst PORT = process.env.PORT || 5000;\r\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY; // Ensure this is set in your .env file\r\n\r\n// POST /api/generateCoverLetter endpoint\r\napp.post(\"/api/generateCoverLetter\", async (req, res) => {\r\n  try {\r\n    // Expected fields\r\n    const { name, jobTitle, company, experience, skills, additionalInfo } = req.body;\r\n    console.log(\"Received request data:\", req.body);\r\n\r\n    // Validate required fields\r\n    if (!name || !jobTitle || !company || !experience || !skills) {\r\n      return res.status(400).json({ error: \"Fields 'name', 'jobTitle', 'company', 'experience', and 'skills' are required\" });\r\n    }\r\n\r\n    // Construct a prompt for generating the cover letter.\r\n    // Optionally include additional info if provided.\r\n    const prompt = `Generate a professional cover letter for ${name} applying for a ${jobTitle} position at ${company}.\r\nWork Experience: ${experience}.\r\nSkills: ${skills}.\r\n${additionalInfo ? \"Additional Information: \" + additionalInfo : \"\"}\r\nEnsure the cover letter is well-structured, engaging, and tailored to the job application.`;\r\n\r\n    // Use the official Gemini API endpoint per documentation:\r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;\r\n\r\n    // Make the POST request to Gemini API using axios.\r\n    const response = await axios.post(apiUrl, {\r\n      contents: [{\r\n        parts: [{ text: prompt }]\r\n      }]\r\n    }, {\r\n      headers: { \"Content-Type\": \"application/json\" }\r\n    });\r\n\r\n    console.log(\"API response:\", response.data);\r\n\r\n    // Check if the API returned valid candidates and extract the generated cover letter.\r\n    if (response.data && response.data.candidates && response.data.candidates.length > 0) {\r\n      const coverLetter = response.data.candidates[0].content?.parts[0]?.text;\r\n      res.json({ coverLetter: coverLetter || \"Cover letter generation failed\" });\r\n    } else {\r\n      res.status(400).json({ error: \"Failed to generate cover letter\" });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error generating cover letter:\", error.response?.data || error.message);\r\n    res.status(500).json({\r\n      error: error.response?.data?.error?.message || \"Internal Server Error\"\r\n    });\r\n  }\r\n});\r\n\r\n// Start the server on the specified PORT\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n\r\nimport React, { useState } from \"react\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"../css/coverLetterGenerator.css\"; // Ensure you have corresponding CSS\r\n\r\nconst CoverLetterGenerator = () => {\r\n  // Form fields: name, jobTitle, company, experience, skills, and additionalInfo (optional)\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    jobTitle: \"\",\r\n    company: \"\",\r\n    experience: \"\",\r\n    skills: \"\",\r\n    additionalInfo: \"\"\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [coverLetter, setCoverLetter] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Update state when input changes\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Generate cover letter by calling the backend endpoint\r\n  const generateCoverLetter = async () => {\r\n    setLoading(true);\r\n    setCoverLetter(\"\");\r\n    setError(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/generateCoverLetter\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(formData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Something went wrong with the request\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setCoverLetter(data.coverLetter);\r\n    } catch (err) {\r\n      console.error(\"Request failed:\", err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Download the generated cover letter as a text file\r\n  const downloadCoverLetter = () => {\r\n    if (coverLetter) {\r\n      const blob = new Blob([coverLetter], { type: \"text/plain;charset=utf-8\" });\r\n      saveAs(blob, \"coverLetter.txt\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cover-letter-generator-container\">\r\n      <h2>AI Cover Letter Generator</h2>\r\n\r\n      <div className=\"form-container\">\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"name\">Your Name</label>\r\n          <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter your name\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"jobTitle\">Job Title</label>\r\n          <input\r\n            id=\"jobTitle\"\r\n            type=\"text\"\r\n            name=\"jobTitle\"\r\n            placeholder=\"Enter the job title\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"company\">Company</label>\r\n          <input\r\n            id=\"company\"\r\n            type=\"text\"\r\n            name=\"company\"\r\n            placeholder=\"Enter the company name\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"experience\">Work Experience</label>\r\n          <textarea\r\n            id=\"experience\"\r\n            name=\"experience\"\r\n            placeholder=\"Describe your work experience\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"skills\">Skills</label>\r\n          <textarea\r\n            id=\"skills\"\r\n            name=\"skills\"\r\n            placeholder=\"List your skills (comma-separated)\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"additionalInfo\">Additional Information (Optional)</label>\r\n          <textarea\r\n            id=\"additionalInfo\"\r\n            name=\"additionalInfo\"\r\n            placeholder=\"Any additional details you'd like to include\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          className={`generate-btn ${loading ? \"loading\" : \"\"}`}\r\n          onClick={generateCoverLetter}\r\n          disabled={loading}\r\n        >\r\n          {loading ? \"Generating...\" : \"Generate Cover Letter\"}\r\n        </button>\r\n      </div>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      {coverLetter && (\r\n        <div className=\"cover-letter-output\">\r\n          <h3>Generated Cover Letter</h3>\r\n          <pre>{coverLetter}</pre>\r\n          <button className=\"download-btn\" onClick={downloadCoverLetter}>\r\n            Download Cover Letter\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoverLetterGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}